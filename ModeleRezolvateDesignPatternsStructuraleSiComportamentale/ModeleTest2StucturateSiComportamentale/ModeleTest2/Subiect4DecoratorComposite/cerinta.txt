Cerințe obligatorii
1. Pattern-urile implementate trebuie sa respecte definiția din GoF discutată în cadrul cursurilor și
laboratoarelor. Nu sunt acceptate variații sau implementări incomplete.
2. Pattern-ul trebuie implementat în totalitate corect pentru a fi luat în calcul.
3. Soluția nu conține erori de compilare.
4. Pattern-urile pot fi tratate distinct sau pot fi implementate pe același set de clase.
5. Implementările care nu au legătura funcțională cu cerințele din subiect NU vor fi luate în calcul
(preluare unui exemplu din alte surse nu va fi punctată).
6. NU este permisă modificare claselor primite.
7. Soluțiile vor fi verificate încrucișat folosind MOSS. Nu este permisă partajarea de cod între
studenți. Soluțiile care au un grad de similitudine mai mare de 30% vor fi anulate.
Cerințe Clean Code obligatorii (soluția este depunctata cu câte 2 puncte pentru fiecare cerința ce nu este
respectată) - maxim se pot pierde 8 puncte
1. Pentru denumirea claselor, funcțiilor, testelor unitare, atributelor și a variabilelor se respecta
convenția de nume de tip Java Mix CamelCase;
2. Pattern-urile și clasa ce conține metoda main() sunt definite in pachete distincte ce au forma
cts.nume.prenume.gNrGrupa.denumire_pattern, cts.nume.prenume.gNrGrupa.main (studenții
din anul suplimentar trec “as” în loc de gNrGrupa);
3. Clasele și metodele sunt implementate respectând principiile KISS, DRY și SOLID (atenție la DIP);
4. Denumirile de clase, metode, variabile, precum și mesajele afișate la consola trebuie sa aibă
legătura cu subiectul primit (nu sunt acceptate denumiri generice). Funcțional, metodele vor afișa
mesaje la consola care sa simuleze acțiunea cerută sau vor implementa prelucrări simple.
Se dezvoltă o aplicație software destinată unui restaurant.
5p. În cadrul restaurantului, clienții au posibilitatea de a alege unul din produsele disponibile în cadrul
meniului său. Însă, de-a lungul timpului, s-a observat că există cereri suplimentare de selecție de
produse cu specific spaniol și italienesc. Astfel, pentru fiecare produs disponibil în meniul
restaurantului, atunci când este preparat, i se poate adăuga un topping suplimentar aferent
specificului selectat. Selecția specificului culinar nu conduce la o modificare a prețului de bază a
preparatului. Clienții pot, de asemenea, comanda și produsele de bază din meniu, fără a dispune
de vreo modificare față de rețeta de bază. Implementarea trebuie să permită adăugarea de noi
specificuri culinare din alte regiuni ale globului.
3p. Să se testeze soluția prin crearea de minim 4 produse din familia Iprodus și afișarea, pentru fiecare,
a prețului și a descrierii lor.
9p. În cadrul restaurantului, clienții au la dispoziție, prin intermediul unui meniu, produsele pe care
aceștia le pot comanda. Există și meniurile zilei care sunt formate din mai multe componente de
tip produs. Să se implementeze arborescența care definește meniul restaurantului. Trebuie să se
utilizeze interfata IProdus primită în cerință. Pentru fiecare produs de tip meniul zilei sau produs,
clientul are posibilitatea sa afle care este prețul aferent produsului comandat. Dacă comanda
meniul zilei, primește un discount de 10% din totalul prețurilor aferente produselor individuale
din care este compus meniul zilei. Meniul restaurantului este format din mai multe categorii:
produse aferente micului dejun, prânzului și cinei.
3p. Să se testeze soluția prin crearea unui meniu tip restaurant format din produse individuale și
produse tip meniul zilei.